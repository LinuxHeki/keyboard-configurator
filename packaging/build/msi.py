import os
import re
import shutil
import subprocess
import sys

from . import consts, functs

# Use ntldd to find the mingw dlls required by a .exe
def find_depends(exe):
    if not os.path.exists(exe):
        sys.exit(f"'{exe}' does not exist")
    output = subprocess.check_output(['ntldd.exe', '-R', exe], universal_newlines=True)
    dlls = set()
    mingw_dir = None
    for l in output.splitlines():
        m = re.search(consts.DLL_RE, l, re.IGNORECASE)
        if m:
            dlls.add((m.group(0), m.group(2)))
            mingw_dir = m.group(1)
    return mingw_dir, dlls

def build_msi(args):
    crate_version = functs.get_crate_version()

    # Generate set of all required dlls
    dlls = set()
    mingw_dir = None
    for i in consts.EXES:
        mingw_dir_new, dlls_new = find_depends(i)
        dlls = dlls.union(dlls_new)
        mingw_dir = mingw_dir or mingw_dir_new

    # The svg module is loaded at runtime, so it's dependencies are also needed
    dlls = dlls.union(find_depends(f"{mingw_dir}/lib/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-svg.dll")[1])

    # Generate libraries.wxi
    with open('libraries.wxi', 'w') as f:
        f.write("<!-- Generated by build.py -->\n")
        f.write('<Include>\n')

        for _, i in dlls:
            id_ = i.replace('.dll', '').replace('-', '_').replace('+', '')
            f.write(f"    <Component Id='{id_}' Feature='Complete' Guid='*'>\n")
            f.write(f"        <File Name='{i}' Source='out/{i}' />\n")
            f.write(f"    </Component>\n")

        f.write('</Include>\n')

    # Copy executables and libraries
    if os.path.exists('out'):
        shutil.rmtree('out')
    for i in consts.EXES:
        functs.strip(os.path.dirname(i), 'out', os.path.basename(i))
    for src, filename in dlls:
        functs.copy(os.path.dirname(src), 'out', filename)

    # Copy additional data
    for i in consts.ADDITIONAL_FILES:
        functs.copy(mingw_dir, 'out', i)
    subprocess.check_call(["glib-compile-schemas", "out/share/glib-2.0/schemas"])

    # Generate Icon and installer banner
    subprocess.check_call(["rsvg-convert", "--width", "256", "--height", "256", "-o", "keyboard-configurator.png", consts.ICON])
    subprocess.check_call(["convert", "keyboard-configurator.png", "out/keyboard-configurator.ico"])
    subprocess.check_call(["rsvg-convert", "--width", "493", "--height", "58", "-o", "banner.png", "banner.svg"])
    subprocess.check_call(["convert", "banner.png", "banner.bmp"])
    subprocess.check_call(["rsvg-convert", "--width", "493", "--height", "312", "-o", "dialog.png", "dialog.svg"])
    subprocess.check_call(["convert", "dialog.png", "dialog.bmp"])

    # Build .msi
    subprocess.check_call([f"{args.wix}/bin/candle.exe", ".\keyboard-configurator.wxs", f"-dcrate_version={crate_version}"])
    subprocess.check_call([f"{args.wix}/bin/light.exe", "-ext", "WixUIExtension", ".\keyboard-configurator.wixobj"])
